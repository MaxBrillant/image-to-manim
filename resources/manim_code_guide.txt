# MANIM CODE GUIDE
## A Comprehensive Reference for Creating Mathematical Animations

## FUNDAMENTAL STRUCTURE

### Scene Architecture
```python
from manim import *

class MathematicalAnimation(Scene):
    def construct(self):
        # 1. Create mobjects
        # 2. Position mobjects
        # 3. Animate transitions
        # 4. Add appropriate pauses
```

ALL code must be placed inside a Scene class's construct() method. Each animation requires a separate class that inherits from Scene.

## MOBJECT CREATION AND MANAGEMENT

### Types of Mobjects
- Geometric shapes: Circle(), Square(), Triangle(), Rectangle(), Polygon(), etc.
- Mathematical objects: Axes(), NumberLine(), FunctionGraph(), etc.
- Text and LaTeX: Text(), MathTex(), Tex()

### Mobject Styling
```python
circle = Circle()
circle.set_stroke(color=BLUE, width=3)  # Outline
circle.set_fill(RED, opacity=0.5)       # Fill

# Styling methods can be chained
square = Square().set_stroke(GREEN).set_fill(YELLOW, 0.7)
```

### Mobject Positioning
```python
# Absolute positioning
mobject.move_to(UP * 2)            # 2 units up from center
mobject.shift(LEFT * 3)            # 3 units left from current position
mobject.to_edge(UL)                # Upper left corner
mobject.to_corner(DR, buff=0.5)    # Bottom right with 0.5 unit buffer

# Relative positioning
mobject2.next_to(mobject1, RIGHT)  # Place mobject2 to the right of mobject1
mobject2.align_to(mobject1, UP)    # Align top edges
```

## ANIMATIONS AND TRANSITIONS

### Creating Animations
```python
# Show/hide mobjects
self.play(FadeIn(mobject))
self.play(Create(circle))
self.play(FadeOut(square))

# Transformations
self.play(Transform(square, circle))
self.play(ReplacementTransform(triangle, pentagon))

# Movement and rotation
self.play(circle.animate.shift(UP))
self.play(square.animate.rotate(PI/4))

# Multiple animations simultaneously
self.play(
    FadeIn(circle),
    square.animate.rotate(PI/2),
    run_time=2
)
```

### Animation Controls
```python
# Duration control
self.play(FadeIn(circle), run_time=2.5)  # 2.5 seconds

# Animation pacing
self.play(FadeIn(circle), rate_func=linear)
self.play(FadeIn(circle), rate_func=smooth)
self.play(FadeIn(circle), rate_func=rush_into)
self.play(FadeIn(circle), rate_func=rush_from)

# Pauses between animations
self.wait(1)  # Wait for 1 second
```

## CRITICAL BEST PRACTICES

### 1. PREVENT VISUAL CROWDING
- NEVER display more than 2-3 main elements simultaneously
- Use FadeOut() to remove elements before introducing new ones
- Maintain minimum spacing (1 unit) between elements
- Track all displayed objects and manage visibility

### 2. SCENE MANAGEMENT
- Each Scene should focus on ONE key concept
- Break complex animations into separate scenes when necessary
- Use clear visual hierarchy (size, color, position)
- Follow a logical flow from introduction → development → conclusion

### 3. COLOR AND STYLE
- Use consistent color schemes (e.g., color-code similar concepts)
- Apply sufficient contrast between elements and background
- Set appropriate opacity for filled shapes (usually 0.6-0.8)
- Use thicker stroke widths (3-5) for important elements

### 4. MATHEMATICAL ACCURACY
- Ensure all formulas and concepts are mathematically correct
- Use proper mathematical notation with MathTex()
- Scale elements appropriately to maintain proportion
- Label axes and quantities clearly when using graphs

### 5. ANIMATION TIMING
- Default animation duration is 1 second (adjust with run_time)
- Use self.wait(1) between conceptual steps
- Slow down complex transformations (run_time=2 or higher)
- Account for reading time when displaying text (rule of thumb: 2 seconds + 0.05s per character)

## COMMON PITFALLS TO AVOID

### 1. OVERCROWDING THE SCENE
 DON'T: Add many elements without removing previous ones
 DO: Use FadeOut() or Transform() to manage visual complexity

### 2. INCONSISTENT POSITIONING
 DON'T: Place elements arbitrarily
 DO: Use systematic positioning (align_to, next_to, grid_layout)

### 3. POOR TIMING
 DON'T: Rush through complex concepts
 DO: Use appropriate wait() times and run_time values

### 4. IMPROPER TRANSFORMATIONS
 DON'T: Transform between unrelated shapes without preparation
 DO: Use intermediate steps or FadeOut/FadeIn for unrelated shapes

### 5. UNCLEAR MATHEMATICAL NOTATION
 DON'T: Use ambiguous or incorrect mathematical symbols
 DO: Follow standard mathematical notation practices

## ADVANCED TECHNIQUES

### Camera Movement
```python
# Use MovingCameraScene instead of Scene
class CameraExample(MovingCameraScene):
    def construct(self):
        # Zoom in/out
        self.play(self.camera.frame.animate.scale(0.5))
        
        # Move camera to focus on a point
        self.play(self.camera.frame.animate.move_to(RIGHT*2))
```

### 3D Animations
```python
# Use ThreeDScene for 3D animations
class Example3D(ThreeDScene):
    def construct(self):
        sphere = Sphere()
        self.set_camera_orientation(phi=75*DEGREES, theta=30*DEGREES)
        self.play(Create(sphere))
```

### Graphing Functions
```python
def func(x):
    return np.sin(x)

axes = Axes(x_range=[-5, 5], y_range=[-1, 1])
graph = axes.plot(func, color=BLUE)
self.play(Create(axes), Create(graph))
```

## LATEX USAGE IN MANIM

### Basic LaTeX Integration
```python
# Simple LaTeX formula
formula = MathTex(r"\frac{d}{dx}f(x)=\lim_{h\to 0}\frac{f(x+h)-f(x)}{h}")
self.play(Write(formula))

# Text with LaTeX
text = Tex(r"The formula $E=mc^2$ revolutionized physics")
self.play(FadeIn(text))
```

### Critical LaTeX Best Practices
1. **ALWAYS use raw strings** (prefix with 'r') for LaTeX to avoid escaping issues:
   ```python
   # CORRECT:
   MathTex(r"\frac{1}{2}")
   
   # INCORRECT - will cause errors:
   MathTex("\frac{1}{2}")
   ```

2. **Use proper escaping** for special characters:
   ```python
   # CORRECT:
   MathTex(r"\{x \in \mathbb{R} \mid x > 0\}")
   ```

3. **Manage alignment** with the align environment:
   ```python
   aligned = MathTex(r"""
       \begin{align}
       f(x) &= x^2\\
       g(x) &= \frac{1}{x}
       \end{align}
       """)
   ```

4. **Break complex formulas** into smaller parts for animation:
   ```python
   # Instead of one complex formula
   eq1 = MathTex(r"f(x) = ")
   eq2 = MathTex(r"x^2 + 2x + 1")
   eq2.next_to(eq1, RIGHT)
   self.play(Write(eq1), Write(eq2))
   ```

### Troubleshooting LaTeX Rendering Issues

#### Common Problems and Solutions

1. **Missing Packages**
   - Use custom templates to import needed packages:
   ```python
   myTemplate = TexTemplate()
   myTemplate.add_to_preamble(r"\usepackage{physics}")
   formula = MathTex(r"\bra{\psi}", tex_template=myTemplate)
   ```

2. **Special Commands**
   - Some LaTeX commands like \cancel require special packages
   - Use alternatives or add packages with tex_template

3. **Size Management**
   - For complex formulas that appear too small:
   ```python
   formula = MathTex(r"\sum_{i=1}^n i = \frac{n(n+1)}{2}")
   formula.scale(1.5)  # Make the formula 50% larger
   ```

4. **Breaking Formulas into Parts**
   - For complex formulas, break them into parts that can be animated separately:
   ```python
   parts = MathTex(
       r"S_n", r"=", r"a_1 + a_2 + \cdots + a_n", r"=", r"\sum_{i=1}^{n} a_i"
   )
   self.play(Write(parts[0:3]))
   self.wait(1)
   self.play(Write(parts[3:]))
   ```

5. **Handling Brackets and Delimiters**
   - Use proper sizing for brackets:
   ```python
   # CORRECT - automatically sized brackets
   MathTex(r"\left( \frac{1}{x} \right)^2")
   
   # INCORRECT - fixed size brackets may be too small
   MathTex(r"( \frac{1}{x} )^2")
   ```

6. **Spacing Issues**
   - Add manual spacing with LaTeX commands:
   ```python
   # Add space between elements
   MathTex(r"f(x) \; = \; x^2")
   
   # Reduce space
   MathTex(r"f\!\!(x)")
   ```

7. **Error Handling**
   - If a LaTeX formula fails to render, try breaking it into simpler parts
   - Check for mismatched braces or incorrect commands
   - Use standard LaTeX debugging techniques (commenting out parts until error disappears)

### Common LaTeX Rendering Errors

1. **Missing Packages or Commands**
   ```
   ValueError: latex error converting to dvi
   ```
   - Solution: Check for special commands that require additional packages
   - Use TexTemplate to include necessary packages

2. **Unmatched Braces**
   ```
   Error: File ended while scanning use of \__alignment_body:nnn
   ```
   - Solution: Ensure all braces `{`, `}` and environments are properly closed
   - Count opening and closing braces to ensure they match

## COMMON MANIM RUNTIME ERRORS

### 1. No Animations Error
```
ValueError: Called Scene.play with no animations
```
This error occurs when you try to play an animation without providing any animation objects.

**Common causes:**
- Trying to animate an empty list or collection
- Using `self.play()` with no arguments
- List comprehension that evaluates to an empty list

**Solutions:**
```python
# WRONG: This will cause the error if current_mobjects is empty
self.play(*[FadeOut(m) for m in current_mobjects])

# CORRECT: Check if the list is empty first
if current_mobjects:
    self.play(*[FadeOut(m) for m in current_mobjects])
    
# ALTERNATIVE: Always ensure there's at least one animation
animations = [FadeOut(m) for m in current_mobjects]
if not animations:
    self.wait(0.1)  # Just wait a bit instead
else:
    self.play(*animations)
```

### 2. Object Not Found in Scene
```
ValueError: Cannot call Mobject.animate on object that is not in the Scene
```

**Solutions:**
- Make sure to add objects to the scene with `self.add(mobject)` before animating them
- Check that objects haven't been removed from the scene

### 3. Position/Attribute Errors
```
AttributeError: 'NoneType' object has no attribute 'get_center'
```

**Solutions:**
- Ensure mobjects are properly initialized before accessing their properties
- Check for typos in method names
- Use proper chaining of methods

### Multi-part LaTeX Animations

For step-by-step derivations or proofs, use MathTex's ability to isolate parts:

```python
formula = MathTex(r"f(x)", r"=", r"x^2", r"+", r"2x", r"+", r"1")
self.play(Write(formula))
self.wait()

# Highlight parts of the formula
self.play(formula[2].animate.set_color(YELLOW))
self.wait()

# Transform parts
self.play(
    TransformMatchingTex(
        formula,
        MathTex(r"f(x)", r"=", r"(x+1)^2")
    )
)
```

## FINAL REMINDERS

1. Test your animations with small sections before creating long sequences
2. Prioritize clarity over complexity
3. Focus on conveying one clear mathematical insight
4. Ensure all mathematical content is accurate and well-formatted
5. Make animations visually engaging but not distracting
