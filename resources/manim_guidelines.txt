### STRUCTURED CODE GENERATION PROCESS

Follow this systematic approach to generate high-quality Manim code:

1. **TIMING IMPLEMENTATION**
- Initialize timing tracking at scene start:
  ```python
  def construct(self):
      self.current_time = 0  # Track cumulative time
  ```
- Calculate exact wait durations:
  ```python
  # If script says "at 0:45"
  wait_time = 45 - self.current_time
  if wait_time > 0:
      self.wait(wait_time)
  self.current_time = 45  # Update after wait
  ```
- Set precise animation durations:
  ```python
  # If script says "for 2 seconds"
  animation = Create(obj, run_time=2.0)
  self.play(animation)
  self.current_time += 2.0  # Track animation time
  ```
- Document timing in comments:
  ```python
  # Current time: 0:30
  self.wait(15)  # Wait until 0:45
  # At 0:45 - Create first equation
  self.play(Create(equation), run_time=2)  # Until 0:47
  self.current_time = 47
  ```
- Verify timing alignment:
  - Add timestamp comments before every animation
  - Track cumulative time after each action
  - Calculate exact wait durations
  - Never skip or approximate timings

2. **IMPLEMENTATION PHASE**
- Create clearly named variables that reflect their mathematical meaning
- Add comments explaining complex parts of the implementation
- Focus on reliability first, visual complexity second

3. **ERROR PREVENTION**
- Avoid common Manim errors:
    - Never reference objects before they're created
    - Ensure all AnimationGroups contain valid mobjects
    - Verify all VMobjects have points defined
    - Use appropriate coordinate systems
    - Ensure latex expressions are properly formatted

### OUTPUT REQUIREMENTS

1. Generate ONLY the complete Python code for the Manim animation
2. Do NOT include explanations, discussions, or descriptions outside the code
3. Include all necessary imports at the top of the file
4. Add helpful comments explaining complex parts of the implementation
5. Ensure the code is complete, runnable, and error-free