# Manim Code Generator for Short Mathematical Animations

Generate complete, executable Manim Python code that elegantly visualizes the provided mathematical narrative. Your code should create professional animations similar to 3Blue1Brown and FutureAdmit videos, optimized for short (1-2 minute) explanations with high visual impact. Focus on creating smooth, intuitive animations that convey mathematically correct concepts clearly and beautifully.

## CORE REQUIREMENTS FOR SHORT VIDEOS

1. Create a well-structured `Scene` class implementing all visual elements with elegant transitions
2. Implement precise timing based on [t=X:XX] markers for a 1-2 minute video
3. Use smooth, meaningful animations with proper easing functions that enhance understanding
4. Maintain proper spacing and layout with dynamic camera movements when appropriate
5. Ensure mathematical accuracy and visual clarity with high-contrast elements
6. Handle LaTeX formatting correctly with animated appearance/transformations
7. Implement the specific color scheme consistently with proper color gradients
8. Optimize for visual impact with minimal text and maximum intuition

## OPTIMIZED IMPLEMENTATION STRUCTURE

Start with this enhanced structure and expand appropriately:

```python
from manim import *
import numpy as np

class MathExplanationScene(Scene):
    def construct(self):
        # Initialize timing and tracking variables
        self.current_time = 0
        self.visual_registry = {}
        
        # Define constants for positioning
        self.TOP_ZONE = 2.5
        self.MIDDLE_ZONE = 0
        self.BOTTOM_ZONE = -2.5
        
        # Define enhanced color scheme (using darker/richer colors for better contrast)
        self.PROBLEM_COLOR = BLUE_E
        self.SOLUTION_COLOR = GREEN_D
        self.HIGHLIGHT_COLOR = YELLOW_D
        self.ERROR_COLOR = RED_E
        self.AUXILIARY_COLOR = PURPLE_D
        
        # Define animation constants
        self.DEFAULT_ANIMATION_RUN_TIME = 1.2  # Slower pacing for better comprehension
        self.TRANSFORM_RUN_TIME = 1.5
        self.WRITE_RUN_TIME = 1.2
        self.FADE_RUN_TIME = 0.8
        
        # Camera settings for dynamic movements
        self.camera_config = {
            "background_color": BLACK
        }
        
        # Helper methods
        self.setup_helper_methods()
        
        # Main animation sections for short videos
        self.visual_hook_section()
        self.problem_essence_section()
        self.key_insight_section()
        self.visual_solution_section()
        self.insight_application_section()
        
    def setup_helper_methods(self):
        # Define helper methods here
        pass
        
    def sync_to_time(self, time_str):
        # Implementation to sync animations to timing markers
        pass
        
    # Define other section methods...
```

## ESSENTIAL HELPER METHODS

Implement these key helper methods for effective animations:

1. **Time synchronization**: Create a method to sync animations to timing markers
2. **Element positioning**: Develop a system for consistent placement in TOP, MIDDLE, and BOTTOM zones
3. **Zone transitions**: Implement elegant transitions between different visual states
4. **Transformation with highlighting**: Create methods to emphasize important parts during transformations
5. **Camera movement**: Use camera focus and zooming to direct attention to key elements

## CAMERA HANDLING AND SCENE SETUP

When implementing camera movements and scene setup:

1. **Use the correct scene class**:
   - For camera movements, extend `MovingCameraScene` instead of `Scene`:
   ```python
   class MathExplanationScene(MovingCameraScene):
       def construct(self):
           # Now you can use self.camera.frame for movements
   ```
   - For 3D visualizations, use `ThreeDScene`
   - For interactive scenes, use `InteractiveScene`

2. **Camera movement techniques**:
   - Use `self.camera.frame.animate.scale(factor)` for zooming (only in `MovingCameraScene`)
   - Use `self.camera.frame.animate.move_to(point)` for panning
   - Use `self.camera.frame.animate.set_width(width)` to fit specific content
   - Always check compatibility with your Manim version

3. **Fallback techniques** (for standard `Scene` class):
   - Use `self.play(Group(*mobjects).animate.scale(factor))` to scale objects instead of camera
   - Use `self.play(Group(*mobjects).animate.shift(direction))` for movement
   - Create focus effects with highlighting and scaling of specific elements

## SPECIALIZED VISUALIZATION TECHNIQUES

Develop specialized visualization techniques for different problem types:

1. **For CALCULUS**:
   - Create methods for animated tangent lines, dynamic Riemann sums, and limit visualizations
   - Implement smooth parameter changes and dynamic zooming for derivatives and integrals
   - Use area shading with opacity transitions for integral representations

2. **For GEOMETRY**:
   - Develop techniques for dynamic angle arcs, congruence highlighting, and transformations
   - Create methods for elegant construction sequences with appearing/disappearing elements
   - Implement perspective shifts to demonstrate geometric relationships

3. **For ALGEBRA**:
   - Create term highlighting and tracking methods with color gradients
   - Implement smooth substitution animations with morphing effects
   - Develop synchronized animations for equivalent operations

4. **For PROBABILITY/STATISTICS**:
   - Create dynamic probability tree diagrams with cascading highlights
   - Implement sample space visualizations with partitioning animations
   - Develop distribution transformation techniques with smooth transitions

## ANIMATION ENHANCEMENT TECHNIQUES

Implement these techniques for more engaging animations:

1. **Animated write-ons**: Create methods for emphasizing key points with timed text appearance
2. **Morphing transitions**: Develop smooth transformations between different representations
3. **Dynamic highlighting**: Implement pulsing effects and color changes to direct attention
4. **Camera movements**: Use zooming, panning, and rotation to enhance visual understanding
5. **Easing functions**: Apply appropriate timing curves to make animations feel natural
6. **Strategic pauses**: Add deliberate pauses after key concepts to allow processing time

## PACING AND TIMING ADJUSTMENTS

1. **Add appropriate pauses**:
   ```python
   # Add a pause after an important concept
   self.wait(1.5)  # 1.5 seconds to process the information
   self.current_time += 1.5
   ```

2. **Use slower animation speeds** for complex transformations:
   ```python
   # For complex mathematical transformations, use longer run times
   self.play(
       Transform(equation1, equation2),
       run_time=2.0  # Slower for better comprehension
   )
   self.current_time += 2.0
   ```

3. **Break complex animations** into smaller, easier-to-follow steps:
   ```python
   # Instead of one complex animation
   # self.play(AnimationGroup(anim1, anim2, anim3, anim4))
   
   # Use multiple simpler animations with pauses
   self.play(anim1, run_time=1.0)
   self.current_time += 1.0
   self.wait(0.5)  # Brief pause
   self.current_time += 0.5
   
   self.play(anim2, run_time=1.0)
   self.current_time += 1.0
   ```

4. **Add visual cues** to help viewers track the progression:
   ```python
   # Add progress indicators or step counters
   step_counter = Integer(1).to_corner(UL)
   self.add(step_counter)
   
   # Update for each major step
   self.play(
       ChangeDecimalToValue(step_counter, 2),
       run_time=0.8
   )
   self.current_time += 0.8
   ```

## CRITICAL IMPLEMENTATION DETAILS

1. **Proper timing**:
   - Use `self.current_time` to track elapsed time
   - Calculate wait durations based on timing markers
   - Add appropriate run_time to all animations

2. **Layout management**:
   - Use `move_to()` for precise positioning
   - Implement proper spacing between elements (0.8 units minimum)
   - Track all elements in the visual registry
   - Clear zones before adding new elements

3. **Mathematical accuracy and correctness**:
   - Implement exact formulas as provided in the narrative
   - Use proper LaTeX syntax for all mathematical expressions
   - Ensure transformations preserve mathematical meaning
   - Verify all calculations and mathematical operations before implementation
   - Double-check all mathematical steps for logical correctness
   - Never implement formulas or concepts you're uncertain about
   - Ensure all visualizations accurately represent the underlying mathematics

4. **Visual clarity**:
   - Limit number of elements on screen (2-3 major elements maximum)
   - Scale elements appropriately based on importance
   - Use clear borders and backgrounds for text elements
   - Implement smooth transitions between scenes

## ENSURING MATHEMATICAL CORRECTNESS

1. **Verify all mathematical operations** in your code before implementation
2. **Test edge cases** to ensure visualizations remain mathematically accurate
3. **Implement only what you understand completely** - do not guess at mathematical concepts
4. **Use standard mathematical libraries** for complex calculations rather than implementing from scratch
5. **Include validation checks** for mathematical operations where appropriate
6. **Document mathematical assumptions** clearly in code comments
7. **Prioritize correctness over visual appeal** when they conflict
8. **Double-check all solutions** using alternative methods when possible
9. **Never implement a solution you're uncertain about** - mathematical correctness is non-negotiable
10. **Verify that animations accurately represent** mathematical transformations without distortion
11. **Cross-check all numerical values** to ensure they're precisely correct

## LATEX USAGE IN MANIM

1. **LaTeX Package Availability**:
   - Manim uses a limited set of LaTeX packages by default
   - The `\cancel` command requires the `cancel` package which may not be available
   - Use `tex_template` to add required packages:
   ```python
   # At the beginning of your scene class
   custom_template = TexTemplate()
   custom_template.add_to_preamble(r"\usepackage{cancel}")
   
   # When creating tex objects
   eq = MathTex(r"\frac{x}{\cancel{y}}", tex_template=custom_template)
   ```

2. **Safe Alternatives to Problematic Commands**:
   - Instead of `\cancel{x}`, use `\xcancel{x}` (requires `cancel` package)
   - Alternative to cancellation: use color or crossing lines manually:
   ```python
   # Create the fraction without cancel
   eq = MathTex(r"\frac{(2x+3y)(x-2y)}{(x-2y)(x-2y)}")
   
   # Add a line to cross out terms manually
   term_to_cancel = eq.get_part_by_tex("x-2y")
   cancel_line = Line(
       term_to_cancel.get_corner(UL), 
       term_to_cancel.get_corner(DR),
       color=RED
   )
   eq.add(cancel_line)
   ```

3. **Proper Escaping**:
   - Use raw strings (`r"..."`) for all LaTeX expressions
   - Double backslashes when not using raw strings: `"\\frac{x}{y}"`
   - Escape special characters: `\{`, `\}`, `\&`, `\$`, `\#`, `\_`, `\%`

4. **Testing LaTeX Expressions**:
   - Test complex LaTeX expressions in isolation before using in animations
   - Use `self.add(MathTex("your expression"))` to quickly test rendering
   - Break complex expressions into smaller parts

## COMMON ERRORS AND COMPATIBILITY ISSUES

1. **Camera frame manipulation**:
   - Error: `AttributeError: 'Camera' object has no attribute 'frame'`
   - Solution: Use `MovingCameraScene` instead of `Scene` when camera movements are needed

2. **LaTeX compilation errors**:
   - Error: `ValueError: latex error converting to dvi`
   - Solution: Check LaTeX syntax, ensure required packages are included, test expressions in isolation

3. **Version compatibility**:
   - Different Manim versions have different APIs and class structures
   - Always check documentation for your specific Manim version
   - Include version-specific alternatives when possible

4. **Performance considerations**:
   - Avoid creating too many mobjects at once
   - Use `VGroup` to manage collections of objects
   - Consider using lower quality settings during development

5. **Debugging techniques**:
   - Add `self.wait()` calls to pause at specific points
   - Use `self.add(Tex("Debug point"))` to mark locations in the animation
   - Print values to console for tracking variables

## IMPLEMENTATION GUIDANCE

When implementing visualizations for different problem types, focus on:

1. **Mathematical correctness above all else** - this is your primary responsibility
2. **Creating clear visual representations** that highlight the key mathematical concepts
3. **Using appropriate animation techniques** specific to each problem domain
4. **Maintaining consistent visual language** throughout the animation
5. **Emphasizing the key insight** identified in the narrative
6. **Using color and motion purposefully** to guide attention

For each problem type, implement methods that create the appropriate visual elements and animate them according to the narrative's timing markers. Use the specialized techniques described above to create engaging, intuitive animations that effectively communicate mathematical concepts.

Remember that the goal is to create short (1-2 minute) videos that focus on a single key insight rather than comprehensive coverage of a topic. Your animations should support this goal by being concise, focused, and visually striking.

## FINAL INTEGRATION OF NARRATIVE AND CODE

Your final code should:

1. Precisely follow the narrative structure
2. Implement all visual elements described in the narrative
3. Maintain proper timing according to the [t=X:XX] markers
4. Create smooth transitions between scenes
5. Ensure all mathematical content is accurate and well-formatted
6. Create engaging, visually appealing animations
7. Maintain proper spacing and layout of elements

Remember to test your code with small sections before integrating everything. Focus on creating a coherent visual flow that enhances understanding of the mathematical concepts.

Code quality is crucial - include comments, use descriptive variable names, and structure your code logically for readability and maintainability.

Generate complete, executable code that precisely matches the provided narrative and meets all the requirements specified above.


EDUCATIONAL NARRATIVE:

{{narrative}}
